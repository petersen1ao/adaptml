name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy>=1.21.0 psutil>=5.8.0
        pip install pytest flake8
        
    - name: Lint with flake8 (non-blocking)
      run: |
        flake8 adaptml --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,W503,F401 || echo "✅ Linting completed"
        
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v
        
    - name: Test direct functionality  
      run: |
        python test_adaptml.py
        
    - name: Test package import
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        import adaptml
        print(f'✅ AdaptML v{adaptml.__version__} imported successfully on Python {sys.version}')
        print(f'📧 Email: {adaptml.__email__}')
        print(f'🌐 Website: {adaptml.__website__}')
        "

  package-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy>=1.21.0 psutil>=5.8.0
        
    - name: Test package installation
      run: |
        pip install -e .
        python -c "import adaptml; print(f'✅ AdaptML v{adaptml.__version__} installed successfully')"
        
    - name: Verify contact information
      run: |
        python -c "
        import adaptml
        email = adaptml.__email__
        website = adaptml.__website__
        print(f'📧 Found email: {email}')
        print(f'🌐 Found website: {website}')
        assert email == 'info2adaptml@gmail.com', f'Email incorrect: {email}'
        assert website == 'https://adaptml-web-showcase.lovable.app/', f'Website incorrect: {website}'
        print('✅ Contact information verified successfully')
        "
        
    - name: Run quickstart demo
      run: |
        python -c "
        print('🚀 Testing quickstart demo...')
        from adaptml import quickstart
        quickstart()
        print('✅ Quickstart demo completed successfully')
        "

  functionality-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy>=1.21.0 psutil>=5.8.0
        
    - name: Test AdaptML core functionality
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        from adaptml import AdaptiveInference, AdaptiveConfig
        
        print('🧪 Testing AdaptML core functionality...')
        
        # Test initialization
        config = AdaptiveConfig(prefer_cost=True)
        inference = AdaptiveInference(config)
        print('✅ AdaptiveInference initialized')
        
        # Test model registration
        model_id = inference.register_model('test_model', {'type': 'mock'})
        print(f'✅ Model registered: {model_id}')
        
        # Test prediction
        result = inference.predict(model_id, 'test input')
        print(f'✅ Prediction successful: {result.prediction[:30]}...')
        print(f'📊 Cost: \${result.cost:.6f}, Latency: {result.latency:.3f}s')
        
        # Test stats
        stats = inference.get_stats()
        print(f'✅ Stats: {stats[\"registered_models\"]} models, {len(stats[\"available_engines\"])} engines')
        
        print('🎉 All functionality tests passed!')
        "
